---
author: njuxjy
comments: true
date: 2013-04-09 09:29:56+00:00
layout: post
slug: ios%e7%9a%84%e5%a4%8d%e6%9d%82%e6%80%a7%ef%bc%88%e8%af%91%e6%96%87%ef%bc%89
title: iOS的复杂性（译文）
wordpress_id: 563
categories:
- iOS
---

原文地址：http://multitasked.net/complexities-of-iOS-programming/

=====================================

我做iOS开发已经有两年了。我很享受这个过程。我喜欢苹果所带来的流畅度和一流的用户体验，也喜欢编写应用带来的工程上的挑战。下面我们走马观花地来看一下iOS编程中有哪些难点。


#### 流畅性


你需要考虑的首要约束是流畅性。就像我有次在Twitter上看到的那样，有条法则是“每秒60帧，不然就滚蛋”（我记得是@flyosity说的）。苹果在他们所有的（大部分）应用中都树立了流畅度的标准。iOS平台的滚动速度和响应速度仍然是其他系统所不能企及的。只要你的应用卡住超过半秒钟，你的大多数用户们便会不耐烦地开始点击设备。而在滚动列表时卡住更会降低你的应用在应用商店中的平均得分。





#### 并发


为了保持流畅，方法众所周知：用主线程来更新应用界面。你要避免在主线程中做输入输出（磁盘或者网络）操作，以及耗时的计算，这些会使得界面卡住。

换句话说，你得使你的程序并发：在后台开启耗时的任务，等待它们回调。问题在于，并发很困难，跟博士论文一样的难。很难去思考一个并发运行的程序，因为你不能用严格的顺序思维去思考，你很容易由于在不同线程中修改了相同的内存空间而遇到麻烦。

这里的主要问题是，如果你在某个时刻忘了回到主线程中去更新界面的话，你的应用可能会崩溃（因为苹果的图形界面库UIKit不是线程安全的），但由于有并发，程序可能不会每次都崩溃，而且在调试环境里很难重现，因为假如设置了一个断点，可能会改变事件发生的顺序。

如果你使用了Core Data（如果你需要结构化数据存储，这是一个解决方案）的话，问题会更加复杂，Core Data有它自己的限制。基本上，如果你在一个线程中创建了ManagedObject（Core Data的数据基类），然后又在另一个线程中操作它的话，就有崩溃的危险。可喜的是，iOS提供了一些不错的方法来将你的任务分发到不同的线程中，但这也让我不得不面对iOS平台的另一个难点了。


#### 不止一种的解决方案


Perl的座右铭在iOS上体现地很充分：“不止一种的解决方案”。iOS中使用的技术可以追溯到1989年的NeXTSTEP时代，你仍然可以在代码库中找到这些古老的痕迹，这些古老的东西和它们的许多变种久而久之会妨碍我们的工作。你经常会发现相同概念的非常相似的几种实现，一个在Objective-C中，另一个在纯C的API中（比如UIFont vs CTFont），它们的差异很小。回到线程的例子，你至少有4种不同的方法在后台线程中开启任务：



	
  1. `使用NSObject的 `performSelectorInBackground:withObject:``

	
  2. 使用NSThread

	
  3. 使用Grand Central Dispatch C API

	
  4. 使用iOS4中引入的NSOperation


你怎么知道该怎么选择？根据经验，你应该使用符合你需求且抽象程度最高的，但这也给我们带来了iOS的另一个难点。


#### 文档


你会想去文档中查你需要用哪一种方式。不幸的是，苹果的文档并不适合初学者。我在某处读过但是确再也找不回来了：当你理解了某个话题的时候，你会觉得文档很清晰，所有方面都会解释，但不是用一种最直接明了的方式，有时，信息会隐藏在一些不起眼的角落。尤其是，当你有疑惑时，你得从苹果提供的第一个Xcode示例代码开始学习怎么使用某些API，但是请注意，其中一些已经严重过时了，那你就得去看WWDC视频。说实话，只能从视频这种格式去找某些信息（例如Core Data上下文合并的话题）的话使我很沮丧，这些信息没法被谷歌找到（尤其是你需要登录以后才能看到这些信息）。


#### 网络


另一个使得iOS编程变难的地方在于你能以为你的网络连接永远是稳定的（这显然对所有移动平台都适用）。随着用户的移动，每个网络请求都可能会失败。这一点跟你做前端或者服务端开发很不同，这种情况下网络连接大多都很稳定。你得为那么多不同类型的问题提供优雅的软件行为。

更为重要的一点在于，在web应用中，当用户发现页面卡住时候，自然而然就会去做刷新页面操作，与之相比，在移动端，用户在遇到问题时候不会习惯去重启他们的应用。如果你的应用卡在了一个很不好的状态，用户没法恢复到良好状态的话，他很可能就把你的应用卸载掉了。

当你需要提供一些离线功能时，还有其他的难点（想象下用户在飞机上用你的程序）。这会带来同步的问题，一般来讲，和并发一样都是难点。倒不一定针对iOS平台，但确实是个头痛的地方。


#### 资源


受限制的资源也应该被视为难点。你的应用超过了70M内存，就可能被系统杀掉（但不确定，取决于其他进程和设备的内存使用状况）。许多javascript的web应用用的内存都比这多！除了内存，CPU也远没有你的笔记本强大。这也需要考虑。

内存管理以前是objective-c的一个主要麻烦点，但在2011年引入了自动引用计数后情况好很多了。你仍然需要理解哪些会被保留在内存中（所有那些你用强指针指向的对象），也需要了解ARC在block中怎么用，但你总算不需要花费几个小时的时间在你的应用中查找多余的release了。


#### 和系统斗


iOS系统提供给开发者的自由度远没有Android的大。举例来说，在你的应用最小化以后，你无法使你的进程在后台一直运行（比如说下载文件）。如果你有一些类似工作要完成，在你最小化应用后，最多有十分钟的时间来执行任务。相似的，你也不能一直被动保持着跟服务器的链接，除非你是VOIP应用。在访问用户通讯录、开启GPS等等方面，也存在诸多限制。

这些限制都源于苹果的出发点：不让别有用心的开发者破坏系统原汁原味的用户体验。但这些限制条件也不是不能被打破，从而找到变通的方法。


#### 应用布局和文本操作


iOS和HTML的流式布局一点也不一样。如果你要展示一段文本，下面放一个按钮，你得计算文本的高度，然后把按钮放到合适的位置。这对web开发者来说是残忍的，也很难跟那些习惯于html和css的相对适应性的客户以及经理们解释。

此外，并不是所有应用都适用。如果你需要像素完美的进行文本操作，就像我在checkthis应用中做的那样，你会遇到很多麻烦。要么你再用UITextView进行文本编辑时不能全权控制一些诸如行高、链接样式等东西，要么你拥有了CoreText提供的所用文本控制权限却没有编辑能力。编辑功能你只能编程实现。不过有个（付费）控件貌似可以解决这个问题，不过我没有测试过。如果你不需要文本编辑，只需要在布局和样式方面有更多控制权限，你可以用[TTTAttributedLabel](https://github.com/mattt/TTTAttributedLabel)。

对文本布局来说，许多人用UIWebView里面的HTML和CSS来解决，但由于webview的异步渲染问题，这种方法不太适合，用起来有些挑战。我不会就原生还是Web应用做过多讨论，但我得指出，大多数App Store里的流行应用都是原生的。


#### 闭源


也许是显而易见的问题，但是无法访问UIKit框架或者iOS的其他重要模块的源代码这一事实，在你碰上一个很难理解的bug时，确实会成为问题。我也记不清有多少次我在Twitter上看到过诸如此类言论：“苹果的x构件没有按照y行为来运作，请弥补我在试图理解这些上面所浪费的时间”。我也很多次成为受害者。iOS系统bug不是很多，但没有访问源码权限的话会增加调试难度。

顺带说一句，iOS开源项目的质量参差不齐，并且有很多地方没有覆盖到，就像没有一个好的Twitter连接库能够考虑到最新的Social框架的新功能，在iOS4-5上或者当用户没有设置他帐号的时候，还是回退到经典的应用内浏览器认证方式。我并没有对任何人的工作有抱怨，只是说些自己观察到的而已。


#### 总结


总的来说，我觉得iOS既是最有价值，也是最具挑战的平台之一。有很多限制要考虑，但我可喜地发现工具极其好用。Instruments和Xcode都是一流的工具。它们肯定有它们的不足，但是和Eclipse或Visual Studio相比，它们很不错。

在有价值的方面，苹果的客户会用一大堆的应用，他们到哪儿都用。此外，如今需要很多有能力的移动开发者，移动开发呈两位数增长。因此，如果你呈观望态度，我会鼓励你冒险尝试下iOS开发。


