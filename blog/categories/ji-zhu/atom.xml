<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | 不可卷也]]></title>
  <link href="http://xiaojiayi.com/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://xiaojiayi.com/"/>
  <updated>2014-04-19T22:40:32+08:00</updated>
  <id>http://xiaojiayi.com/</id>
  <author>
    <name><![CDATA[njuxjy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(旧文迁移) 关于fork()]]></title>
    <link href="http://xiaojiayi.com/blog/2013/05/02/e585b3e4ba8efork/"/>
    <updated>2013-05-02T19:08:37+08:00</updated>
    <id>http://xiaojiayi.com/blog/2013/05/02/e585b3e4ba8efork</id>
    <content type="html"><![CDATA[<p>APUE上关于fork的使用有段比较经典的代码：   <br/>
if ((pid = fork()) &lt; 0) {    <br/>
err_sys(&ldquo;fork error&rdquo;);    <br/>
} else if (pid == 0) { /<em> child </em>/    <br/>
execlp(buf, buf, (char <em>)0);    <br/>
err_ret(&ldquo;couldn&rsquo;t execute: %s&rdquo;, buf);    <br/>
exit(127);    <br/>
}    <br/>
/</em> parent */    <br/>
if ((pid = waitpid(pid, &amp;status, 0)) &lt; 0)    <br/>
err_sys(&ldquo;waitpid error&rdquo;);    <br/>
一开始看这段代码会有疑惑，比如说else if(pid==0)执行子进程代码那块，字面上理解这段代码就是说进程号为0则判断其为子进程，则执行里面的代码，可是，子进程号为0，这怎么可能？ 因此我觉得这里将fork的返回值取名为pid有误导读者的影响，改为fRetValue或者干脆叫i会不会好点？    <br/>
下面是网上摘的一段fork的解释：    <br/>
<strong>调用方法</strong></p>

<h1>include</h1>

<h1>include</h1>

<p>pid_t fork(void);    <br/>
正确返回：在父进程中返回子进程的进程号，在子进程中返回0    <br/>
错误返回：-1    <br/>
子进程是父进程的一个拷贝。即，子进程从父进程得到了数据段和堆栈段的拷贝，这些需要分配新的内存；而对于只读的代码段，通常使用共享内存的方式访问。fork返回后，子进程和父进程都从调用fork函数的下一条语句开始执行。    <br/>
父进程与子进程的不同之处在于：fork的返回值不同——父进程中的返回值为子进程的进程号，而子进程为0    <br/>
关于fork，还有个问题，就是print缓冲区被子进程复制的问题，如果执行下面这段代码：    <br/>
pid_t fRetValue;    <br/>
printf(“fork!”);    <br/>
fRetValue=fork();    <br/>
if (fRetValue &lt; 0)    <br/>
printf(“error in fork!”);    <br/>
else if (fRetValue == 0)    <br/>
printf(“i am the child process, my process id is %d”,getpid());    <br/>
else    <br/>
printf(“i am the parent process, my process id is %d”,getpid());    <br/>
父子进程都会打印出fork!，而如果将printf(“fork!”)改为printf(“fork!\n”)就只会打印出一个fork!，同样摘了段解释如下：    <br/>
主要的区别是因为有了一个\n回车符号这就跟Printf的缓冲机制有关了,printf某些内容时,操作系统仅仅是把该内容放到了stdout的缓冲队列里了,并没有实际的写到屏幕上但是,只要看到有 n 则会立即刷新stdout,因此就马上能够打印了.运行了printf(“AAAAAA”) 后, AAAAAA 仅仅被放到了缓冲里,再运行到fork时,缓冲里面的 AAAAAA 被子进程继承了因此在子进程度stdout缓冲里面就也有了 AAAAAA.所以,你最终看到的会是 AAAAAA 被printf了2次!!!!而运行 printf(“AAAAAAn”)后, AAAAAA 被立即打印到了屏幕上,之后fork到的子进程里的stdout缓冲里不会有 AAAAAA 内容因此你看到的结果会是 AAAAAA 被printf了1次!!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(旧文迁移) Android开发（二）——在Android应用程序中使用加速度传感器]]></title>
    <link href="http://xiaojiayi.com/blog/2013/05/02/androide5bc80e58f91efbc88e4ba8cefbc89e59ca8androide5ba94e794a8e7a88be5ba8fe4b8ade4bdbfe794a8e58aa0e9809fe5baa6e4bca0e6849fe599a8/"/>
    <updated>2013-05-02T18:57:53+08:00</updated>
    <id>http://xiaojiayi.com/blog/2013/05/02/androide5bc80e58f91efbc88e4ba8cefbc89e59ca8androide5ba94e794a8e7a88be5ba8fe4b8ade4bdbfe794a8e58aa0e9809fe5baa6e4bca0e6849fe599a8</id>
    <content type="html"><![CDATA[<p>最近工作需要看了点传感器的东西，顺便熟悉了下Android平台上开发传感器程序的流程，作为借鉴。好久没用Android，竟然发现搭环境也有些生疏了，于是打算从如何搭建环境写起，也算是复习一遍，题目就叫《从零开始构建Android加速度传感器程序》。</p>

<p>由于国内Android官网（developer.android.com）没法访问（当然google下还是能找到访问的办法），图省事就找了公司文件服务器上的老版本sdk（android-sdk-1.5_r2-windows）装上，结果发现只要一用SensorManager.getSystemService(SENSOR_SERVICE)这句，程序就死了，折腾半天发现是sdk版本问题，说是1.5r3版本（不包括r3）以前的版本在传感器这块有bug，在r3开始以后的版本中已经修复，又搜遍了服务器没发现有更新的版本，只好自己去网上（<a href="http://androidappdocs.appspot.com/%EF%BC%89%E4%B8%8B%E4%B8%80%E4%B8%AA%E3%80%82">http://androidappdocs.appspot.com/%EF%BC%89%E4%B8%8B%E4%B8%80%E4%B8%AA%E3%80%82</a> 更多的废话请看下面……</p>

<p>=======================================================================</p>

<p><strong>配置Android</strong><strong>开发环境</strong></p>

<ol>
<li><p>下载eclipse3.5版（当然其他版本也可以，文中用的是此版本，其他版本情况基本类似）。当然jdk之类的是先要安装的。</p></li>
<li><p>在这里（<a href="http://androidappdocs.appspot.com/sdk/index.html%EF%BC%89%E4%B8%8B%E8%BD%BDandroid">http://androidappdocs.appspot.com/sdk/index.html%EF%BC%89%E4%B8%8B%E8%BD%BDandroid</a> sdk的安装程序<a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image002.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image002_thumb.jpg" alt="clip_image002" /></a></p></li>
</ol>


<p>并点AndroidSDKSetup.exe进行安装，注意勾选这个：</p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image004.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image004_thumb.jpg" alt="clip_image004" /></a></p>

<p>这玩意的安装过程就是从网上下载你选择的sdk放到它自己的目录里，所以装完后你将这整个文件android-sdk_r5-windows随便放到你喜欢的路径下，并在环境变量Path后加上“……\android-sdk-windows\tools”</p>

<ol>
<li>接下来要安装的是ADT（Android Development Tool），是个eclipse插件，所以可以依次在eclipse里点击Help->Install new software->Add，按下图所示输入Name和Location：</li>
</ol>


<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image006.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image006_thumb.jpg" alt="clip_image006" /></a></p>

<p>OK，在下拉列表里选择刚加入的站点，并勾选要下载的文件：</p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image008.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image008_thumb.jpg" alt="clip_image008" /></a></p>

<p>一路next。要是有问题把站点路径的https改成http。要是还有问题的话，就先下载ADT的zip包（Android2.1要求ADT-0.9.6，在<a href="http://androidappdocs.appspot.com/sdk/eclipse-adt.html%E4%B8%8A%E6%9C%89%E4%B8%8B%E8%BD%BD%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E5%88%9A%E5%88%9A%E8%BE%93%E5%85%A5Location%E7%9A%84%E7%95%8C%E9%9D%A2%E7%82%B9%E5%87%BBArchive%E9%80%89%E6%8B%A9zip%E5%8C%85%E5%AE%89%E8%A3%85%EF%BC%9A">http://androidappdocs.appspot.com/sdk/eclipse-adt.html%E4%B8%8A%E6%9C%89%E4%B8%8B%E8%BD%BD%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E5%88%9A%E5%88%9A%E8%BE%93%E5%85%A5Location%E7%9A%84%E7%95%8C%E9%9D%A2%E7%82%B9%E5%87%BBArchive%E9%80%89%E6%8B%A9zip%E5%8C%85%E5%AE%89%E8%A3%85%EF%BC%9A</a></p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image010.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image010_thumb.jpg" alt="clip_image010" /></a></p>

<ol>
<li>装完ADT，eclipse依次点击Window->Preferences->Android，选择SDK根目录。这样便装完了，可以新建个Android Project跑个helloworld看看效果。</li>
</ol>


<p>ps:    <br/>
1. 要是启动simulator有问题，在命令行中输入android create avd –name mySimulatorName –target 2先创建AVD。</p>

<ol>
<li><p>要是控制台出现错误信息Android requires .class compatibility set to 5.0. Please fix project properties，选择 project &ndash;> Android Tools &ndash;>Fix Project Properties。</p></li>
<li><p>Android界面可视化编辑工具——>DroidDraw，可以拖出界面，生成的XML布局文件拷贝进自己的工程里。</p></li>
<li><p>模拟器要记得定时清理文件，不然有可能会占很多空间：c:\documents and settings\Administrator\Local Settings\Temp\AndroidEmulator中的.tmp文件都可以删除。</p></li>
<li><p>每个SDK版本都有其相应的ADT版本。</p></li>
</ol>


<p><strong>简单的helloworld</strong><strong>程序</strong></p>

<p>1.<a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image012.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image012_thumb.jpg" alt="clip_image012" /></a></p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image014.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image014_thumb.jpg" alt="clip_image014" /></a></p>

<ol>
<li>包的目录结构如下所示：</li>
</ol>


<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image016.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image016_thumb.jpg" alt="clip_image016" /></a></p>

<ol>
<li>对项目右键Run as-> Android Application，等模拟器启动，第一次启动要很久（google上有解决办法），启动完毕运行应用程序，Hello World !</li>
</ol>


<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image018.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image018_thumb.jpg" alt="clip_image018" /></a></p>

<p>ps:   <br/>
1. 如何看到System.out.println打印的信息？</p>

<p>不像普通的java程序可以在控制台中看到，我们需要在logcat里查看调试信息。具体方法如下：</p>

<p>1) 点击Window->Show View->Other->Android->Logcat</p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image020.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image020_thumb.jpg" alt="clip_image020" /></a></p>

<p>2) 于是在应用程序运行过程中所有的调试信息都可以在这里看到：</p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image022.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image022_thumb.jpg" alt="clip_image022" /></a></p>

<ol>
<li>在这里（<a href="http://androidappdocs.appspot.com/reference/packages.html%EF%BC%89%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0Android">http://androidappdocs.appspot.com/reference/packages.html%EF%BC%89%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0Android</a> API。</li>
</ol>


<p><strong>用SensorSimulator</strong><strong>向Android</strong><strong>模拟器发送模拟信号</strong></p>

<p>Android中传感器的类型有方向、加速度、光线、磁场、临近性、温度等，本文以较有代表性的加速度传感器为例，旨在说清传感器应用开发的流程。</p>

<p>我们要想办法向Android模拟器传送加速度改变的信号，以便让应用程序监控到事件并作出响应。Android SDK中貌似没有和模拟器搭配使用的类似工具，幸运的是国外有个OpenIntents团队开发的Sensor simulator工具（可以在<a href="http://code.google.com/p/openintents/downloads/">http://code.google.com/p/openintents/downloads/</a> list上找到sensorsimulator-1.0.0-beta1.zip下载，在<a href="http://openintents.org/en/node/6%E4%B8%8A%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%9C%A8%E7%BA%BF%E7%9A%84Applet%E6%BC%94%E7%A4%BA%E7%A8%8B%E5%BA%8F%EF%BC%89%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E3%80%82">http://openintents.org/en/node/6%E4%B8%8A%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%9C%A8%E7%BA%BF%E7%9A%84Applet%E6%BC%94%E7%A4%BA%E7%A8%8B%E5%BA%8F%EF%BC%89%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E3%80%82</a></p>

<p>关于加速度传感器是怎么回事，这里就不多解释了，有兴趣可以参考下这个网页（说的是iphone的，但Android原理类似，<a href="http://www.riameeting.com/node/538%EF%BC%89%E3%80%82">http://www.riameeting.com/node/538%EF%BC%89%E3%80%82</a></p>

<p>首先介绍下加速度传感器Demo的应用场景：把手机当做一个平面，平面上有个小球在滚动，Demo中模拟出现实世界球在重力作用下的滚动轨迹。由于没有真机，要在模拟器上实现，所以必须有工具能制造出使模拟器“上下左右前后旋转”的错觉，Sensor simulator便是通过调整虚拟手机的摆放位置向Android模拟器传达信息。</p>

<p>下面介绍如何使用Sensor Simulator：</p>

<ol>
<li><p>将文件解压，打开bin下的sensorsimulator.jar</p></li>
<li><p>将bin下的SensorSimulatorSettings.apk安装到模拟器中，具体方法是先打开模拟器，然后在命令行中输入adb install SensorSimulatorSettings.apk，如图安装成功：</p></li>
</ol>


<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image024.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image024_thumb.jpg" alt="clip_image024" /></a></p>

<ol>
<li>在模拟器中打开Sensor Simulator Settings，在模拟器中将IP配置为和PC上Sensor Simulator中的IP相同，如图所示：</li>
</ol>


<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image026.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image026_thumb.jpg" alt="clip_image026" /></a></p>

<ol>
<li>在Sensor Simulator Settings中点击Testing，点击Connect，勾选几种传感器类型使之enable，如下图所示：</li>
</ol>


<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image028.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image028_thumb.jpg" alt="clip_image028" /></a></p>

<p><strong>加速度传感器演示程序</strong></p>

<p>Sensor Simulator配置完毕了，我们可以建个小项目来验证下：</p>

<ol>
<li><p>新建个SensorBall的项目，通过Add jars的方法将sensorsimulator-1.0.0-beta1\lib下的sensorsimulator-lib.jar添加到工程中来</p></li>
<li><p>在AndroidManifest.xml中添加</p></li>
</ol>


<p>&lt;uses-permission android:name=&ldquo;android.permission.INTERNET&rdquo;/></p>

<ol>
<li>跟传统的mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);方式获取传感器服务不同，这里要用</li>
</ol>


<p>mSensorManager = SensorManagerSimulator.getSystemService(this, SENSOR_SERVICE);这种方式</p>

<ol>
<li>使用mSensorManager.connectSimulator();连接到Sensor simulator</li>
</ol>


<p>由于代码不是自己写的，网上看到的，就不在这里贴代码了，有兴趣的可以参考这里：</p>

<p><a href="http://ophonesdn.com/article/show/183">http://ophonesdn.com/article/show/183</a></p>

<p>最后的效果如下图所示：</p>

<p><a href="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image030.jpg"><img src="http://www.xiaojiayi.com/wp-content/uploads/2013/05/clip_image030_thumb.jpg" alt="clip_image030" /></a></p>

<p>当调整Sensor simulator中虚拟手机位置时，Android模拟器中的小球位置也会发生变化。</p>

<p>关于Sensor simulator的更详细的介绍和使用方法，可以参考下面这两个网页：<a href="http://openintents.org/en/node/23">http://openintents.org/en/node/23</a>   <br/>
<a href="http://code.google.com/p/openintents/wiki/SensorSimulator">http://code.google.com/p/openintents/wiki/SensorSimulator</a></p>

<p>（完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(旧文迁移) Android开发（一）]]></title>
    <link href="http://xiaojiayi.com/blog/2013/05/02/androide5bc80e58f91efbc88e4b880efbc89/"/>
    <updated>2013-05-02T18:56:02+08:00</updated>
    <id>http://xiaojiayi.com/blog/2013/05/02/androide5bc80e58f91efbc88e4b880efbc89</id>
    <content type="html"><![CDATA[<p>1、环境配置</p>

<ul>
<li><p>安装Eclipse3.5，Android SDK，ADT插件（Help->Install New Softare->“<a href="https://dl-ssl.google.com/android/eclipse">https://dl-ssl.google.com/android/eclipse</a>”->弹出来的两个都选上->装好重启下），参考“<a href="http://androidappdocs.appspot.com/sdk/eclipse-adt.html">http://androidappdocs.appspot.com/sdk/eclipse-adt.html</a>”</p></li>
<li><p>配置环境变量，在Path后添加“C:\android-sdk_r3-windows\android-sdk-windows\tools”</p></li>
</ul>


<p>2、导入已有项目不要用import，而要用File->New->Android Project，不然Eclipse无法识别为Android项目。</p>

<p>3、模拟器打开后一直开着好了，不用每个程序运行完就关掉，第一次打开模拟器时间较长。</p>

<p>4、在命令行输入adb shell可进入模拟器的Shell环境中，要删除模拟器中自己写的程序，则：cd /data/app –> ls –>rm *.apk。</p>

<p>5、学习资料</p>

<ul>
<li><p>SDK中有很多Sample可以运行</p></li>
<li><p><a href="http://android.toolib.cn/guide/index.php">http://android.toolib.cn/guide/index.php</a> 有API文档和开发向导，有很多教程和范例</p></li>
<li><p><a href="http://www.rbgrn.net/">http://www.rbgrn.net/</a> 有Android 3D游戏开发日志</p></li>
<li><p><a href="http://www.anddev.org/">http://www.anddev.org/</a> 最大的英文Android论坛</p></li>
<li><p><a href="http://code.google.com/intl/zh-CN/android/index.html">http://code.google.com/intl/zh-CN/android/index.html</a> 不过经常性不能访问</p></li>
<li><p><a href="http://www.hiapk.com/bbs/">http://www.hiapk.com/bbs/</a> 最大的中文Android论坛</p></li>
<li><p><a href="http://www.chinaup.org/docs/documentation.html">http://www.chinaup.org/docs/documentation.html</a> 第二个的中文版</p></li>
<li><p><a href="http://rayleung.javaeye.com/">http://rayleung.javaeye.com/</a> 关注Android的博客</p></li>
<li><p><a href="http://www.android123.com.cn/">http://www.android123.com.cn/</a> 同上</p></li>
<li><p><a href="http://code.google.com/p/androidbmi/wiki/IntroAndroid">http://code.google.com/p/androidbmi/wiki/IntroAndroid</a> 台湾资料</p></li>
<li><p>《Android A Programmer&rsquo;s Guide》</p></li>
<li><p>高焕堂的几本书</p></li>
<li><p>《Android SDK开发范例大全》</p></li>
<li><p>《深入浅出Google Android》</p></li>
<li><p>《Android基础教程》</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows phone 7 推送功能的实现]]></title>
    <link href="http://xiaojiayi.com/blog/2012/04/06/windows-phone-7-e68ea8e98081e58a9fe883bde79a84e5ae9ee78eb0/"/>
    <updated>2012-04-06T15:30:46+08:00</updated>
    <id>http://xiaojiayi.com/blog/2012/04/06/windows-phone-7-e68ea8e98081e58a9fe883bde79a84e5ae9ee78eb0</id>
    <content type="html"><![CDATA[<p>最近负责了某移动互联网产品wp7平台的推送模块，在这分享一些关于客户端推送的经验。</p>

<p>我们需要实现的是服务端能根据用户id向客户端推送私信、评论、好友请求、以及基于地理位置的一些信息。</p>

<h2>wp7与iOS push的不同</h2>

<h2> </h2>

<p>搞过symbian的push，也了解过iOS和android的相关内容，wp7的push和iOS的大致类似，也有一些不同，结合我网产品，主要在下面几个方面，也是没搞过wp7 push的我网服务端需要知道的：</p>

<p>1. <strong>Push</strong><strong>类型不同</strong></p>

<p>wp7有三种类型的push：
Toast：程序前后台都能收到，后台时弹出系统toast框，前台时程序自定义处理方式，push数据为xml格式
Raw：push数据为任意格式(json,xml等等)，但程序仅在前台时能收到，不满足我网客户端需求，本文不考虑这种类型
Tile：在客户端桌面的大图标上显示push（图片，文字等），xml格式数据，本期客户端暂时不需要
因此，暂时只需要考虑Toast类型的push。</p>

<p>2. <strong>客户端token</strong><strong>与userid</strong><strong>之间的对应</strong></p>

<p>wp7在建立push初期，检查客户端是否存在push通道。若不存在，先创建新通道，向微软MPNS（Microsoft Push Notification Service）索取到一个通道URI（这个URI我网push服务要用），并向我网push服务进行注册。若已存在，询问微软MPNS是否需要更新通道URI，同时使用已保存的通道URI向我网push服务进行注册。若MPNS反馈了新的URI，客户端需要向我网push服务更新注册信息。
注册方式有以下几种方案吧：
a) 用户登陆以后，将userid, URI, device id一起发给服务端作对应
b) 不管用户登陆与否，先将URI和device id发给服务端，因为用户手动登陆时总会上传device id给服务端，这样也能做好三者的对应
c) 通过某个固定的现有接口将device id和userid上传</p>

<p>3. <strong>Push</strong><strong>发送的格式</strong></p>

<p>wp7的toast push只支持xml格式的数据，eg:
&lt;wp:Notification xmlns:wp=&ldquo;WPNotification&rdquo;>
&lt;wp:Toast>
&lt;wp:Text1>push消息标题&lt;/wp:Text1>
&lt;wp:Text2>push消息内容&lt;/wp:Text2>
&lt;wp:Param>一些参数键值对&lt;/wp:Param>
&lt;/wp:Toast>
&lt;/wp:Notification>
其中&lt;wp:Param>中的内容可以用来传参数，eg:
&lt;wp:Param>?pushType=10&amp;poiId=20&amp;specialId=15&lt;/wp:Param>
其中，<Param> tag中的内容不能超过256个字符
服务端还要设置一些HTTP头和push参数等，可以参考：
<a href="http://msdn.microsoft.com/en-us/library/hh202945(v=vs.92">http://msdn.microsoft.com/en-us/library/hh202945(v=vs.92).aspx</a>.aspx)
<a href="http://www.daveamenta.com/2010-11/send-push-notifications-to-windows-phone-7-from-php/">http://www.daveamenta.com/2010-11/send-push-notifications-to-windows-phone-7-from-php/</a></p>

<h2>wp7与Symbian push的不同</h2>

<h2> </h2>

<p>Symbian上的push不是真正意义上的push，是使用了后台长连接的方式来实现的伪push。
这样做的缺点有：</p>

<ol>
<li><p> 费电费流量。后台始终保持着socket连接，每隔几分钟发个心跳包。</p></li>
<li><p> 从用户开机到用户打开程序这段时间内是接收不到push的，因为后台进程压根不会启动</p></li>
<li><p> 有很小的几率能造成主程序刷不出数据。这种状况出现过两三次，以至于有次发版前只能把push先咔掉。原因可能和接入点有关。</p></li>
<li><p> 实现复杂度高
1） 系统原生不支持push，push提示的UI还得自己做。一个应用得有三个进程：主进程，后台进程，push提示进程
2） 复杂的进程间通讯，主进程&mdash;&ndash;>后台进程，后台进程&lt;&mdash;&ndash;>push提示进程，不同的通讯机制（和带UI的程序通讯，以及和Console程序通讯）
3） 额外的数据结构，用队列缓存push，进程间传递的字符串的解析等</p></li>
</ol>


<p>总而言之，在Symbian上做push的感觉就是——女屌丝非要穿上黑丝齐B小短裙把自己打扮得像女神，虽然能用，但体验不会好。</p>

<h2>wp7 push的服务端</h2>

<h2> </h2>

<p>这里以发私信为例，为了能向某用户发私信push，需要保存有user id，wp7手机device id(唯一标示了一部手机)和URI三者的对应关系。通过user id找到该用户最近使用的device id，再通过device id找到与其一一对应的URI，向该URI发送一堆数据，然后由微软发给指定的客户端。</p>

<p>那么，这一堆数据是怎样的？见官方文档。<a href="http://msdn.microsoft.com/en-us/library/hh202945">http://msdn.microsoft.com/en-us/library/hh202945</a>(v=vs.92).aspx
有一些需要注意的地方：</p>

<ol>
<li></li>
</ol>


<p>Character
XML encoding</p>

<p>&lt;</p>

<p>&lt;</p>

<blockquote></blockquote>

<p>&gt;</p>

<p>&amp;</p>

<p>&amp;</p>

<p>‘</p>

<p>&apos;</p>

<p>“</p>

<p>&quot;</p>

<p>上面这些特殊字符需要转换</p>

<ol>
<li><p> &lt;wp:Param>中的内容不能超过256个字符</p></li>
<li><p> 对中文需要转换：转成utf-8后再包一层，比如：“我”转成“&#x6211;”</p></li>
<li><p> &lt;wp:Text1>和&lt;wp:Text2>，其中Text1和Text2不是用户可以随便修改的，Text1表示push Toast的标题，Text2表示内容。我原以为可以随便修改，把Text1命名为Title，Text2命名为Content，结果客户端怎么也收不到。Text1和Text2至少要存在一个，不然客户端收不到</p></li>
<li><p> &lt;wp:Param>中有三种传参数方式：
1）/page1.xaml    点击Toast后跳到客户端的page1.xmal页面
2）/page1.xaml?value1=1234 &amp;value2=9876    点击Toast后跳到客户端的page1.xmal页面，并把value1和value2传给页面
3）?value1=1234 &amp;value2=9876   点击Toast后跳到客户端的默认首页
我网用的第三种，毕竟让服务端写死客户端的跳转页面不灵活且增加沟通成本，不如跳到默认首页，在其中进行统一跳转处理</p></li>
</ol>


<p>.net服务端比php会简单一些，至少中文处理要简单些。</p>

<h2>wp7 push的客户端</h2>

<h2> </h2>

<h4> Step 1. 打开通道</h4>

<p> 首先需要打开HttpNotificationChannel，得到URI，发送push。</p>

<pre><code>        private void RegisterDevice()
        {
            App app = Application.Current as App;
            app.httpChannel = HttpNotificationChannel.Find(App.channelName);

            if (app.httpChannel != null)
            {
                SubscribeToChannelEvents();
                SubscribeToService();
                SET_COOKIE("channelUri", app.httpChannel.ChannelUri.ToString());
            }
            else
            {
                //Create new channel
                app.httpChannel = new HttpNotificationChannel(App.channelName);
                SubscribeToChannelEvents();
                app.httpChannel.Open();
                app.httpChannel.BindToShellToast();
            }
        }
</code></pre>

<p>先尝试寻找是否有已存在的通道。如果有，表示已经拥有了该设备的URI，可以直接向我网的服务器进行注册；如果没有，创建新的通道，设置事件处理函数，尝试打开通道，此时程序会向MPNS索取URI  </p>

<h4>Step 2. 设置事件处理函数</h4>

<pre><code>        private void SubscribeToChannelEvents()
        {
            App app = Application.Current as App;
            //Register to UriUpdated event - occurs when channel successfully opens
            app.httpChannel.ChannelUriUpdated += new EventHandler&lt;NotificationChannelUriEventArgs&gt;(httpChannel_ChannelUriUpdated);

            //Subscribe to Toast Notifications
            app.httpChannel.ShellToastNotificationReceived += new EventHandler&lt;NotificationEventArgs&gt;(httpChannel_ShellToastNotificationReceived);

            //general error handling for push channel
            app.httpChannel.ErrorOccurred += new EventHandler&lt;NotificationChannelErrorEventArgs&gt;(httpChannel_ExceptionOccurred);

        }
</code></pre>

<p> 订阅Toast push这句目的是为了能让程序在前台收到Push时自定义处理，如果值需要后台接收Push，则不需要这句。</p>

<pre><code>        void httpChannel_ChannelUriUpdated(object sender, NotificationChannelUriEventArgs e)
        {
            App app = Application.Current as App;
            // Optionally save the URI locally here - e.ChannelUri.ToString();
            string newChannelUri = e.ChannelUri.ToString();
            string oldChannelUri = GET_COOKIE("channelUri") as string;
            if (newChannelUri.CompareTo(oldChannelUri)!=0)
            {
                SET_COOKIE("channelUri", e.ChannelUri.ToString());
                Dispatcher.BeginInvoke(() =&gt;
                {
                    SubscribeToService();
                });
            }
        }

        void httpChannel_ExceptionOccurred(object sender, NotificationChannelErrorEventArgs e)
        {
            // Handle notification exceptions here
        }

        void httpChannel_ShellToastNotificationReceived(object sender, NotificationEventArgs e)
        {
            // This runs when a toast notification is received while the app is running
            if (e.Collection != null)
            {
                Dictionary&lt;string, string&gt; collection = (Dictionary&lt;string, string&gt;)e.Collection;
                Dispatcher.BeginInvoke(() =&gt;
                {
                    //MessageBox.Show(collection["wp:Text2"], collection["wp:Text1"], MessageBoxButton.OK);
                });
            }
        }
</code></pre>

<p>httpChannel_ShellToastNotificationReceived函数不在UI线程中，需要访问UI线程的MessageBox的话需要用Dispatcher.BeginInvoke。
httpChannel_ChannelUriUpdated函数在MPNS返回最新URI时被调用，这里优先使用本地缓存的URI，防止重复注册URI（一般不会，只是做保护处理）。
SubscribeToService中只是简单地调用了客户端现存的一个接口，将device id和URI上传到服务端，服务端此时已经能做好device id，userid, URI的对应了。这个接口由于加上了URI，所以会比较长，因此少调为妙。
此时可以telnet db3.notify.live.net 80，post一些数据给微软，顺利的话应该能在客户端接收到push：</p>

<p> <img src="/images/2012/04/1.png"></p>

<h4>Step 3. 处理push跳转</h4>

<p>不同的push类型需要跳到客户端的不同页面，在默认首页中增加跳转逻辑，需要和各页面负责人进行沟通，就不详述了。</p>

<h2>用后台代理模仿心跳包</h2>

<h2> </h2>

<p> 以上的做法能够满足大部分的推送需求，但是对于一些基于地理位置的推送服务，服务端需要知道客户端的实时经纬度（尽可能做到实时），然后根据用户的当前经纬度判断是否触发推送。因此，客户端需要尽可能实时的将userid和经纬度传给服务端。这在symbian使用心跳包建立push的情况下很容易做到，在心跳包上加上相应字段即可，但是wp7对后台程序的限制很严格，之前也考虑过不走微软的mpns网络，用后台长连接的方式做push，这样服务端不需要做改动，但经过一些调研，发现不可行，原因如下：</p>

<p>wp7的7.0版本不支持后台运行，只能用mpns做push。 
7.1版本会支持Background Agents，但有很多限制（<a href="http://msdn.microsoft.com/en-us/library/hh202944(v=vs.92">http://msdn.microsoft.com/en-us/library/hh202944(v=vs.92).aspx</a>.aspx)）：
1.  后台任务有很多API限制
2.  省电模式下后台代理无法运行，也就无法push
3.  一部手机能开的后台代理数有限制，最少可能只有6个，如果超过限制会引起异常
4.  每30分钟运行一次，期间http长连接能否保持是问题
总的来说，wp7为了省电省流量，对开发者自己的后台任务做了很多限制，体验和实现难度来讲也是用原生的push notification更好一些。</p>

<p>push没法用后台代理来实现，但是一些对不需要严格实时（30分钟一次可以接受）的任务，如上报user id和经纬度，可以使用后台代理实现。可参考：<a href="http://msdn.microsoft.com/en-us/library/hh202961(v=vs.92">http://msdn.microsoft.com/en-us/library/hh202961(v=vs.92).aspx</a>.aspx)</p>

<h4>Step 1. 主程序中开启后台代理</h4>

<pre><code>protected void StartBackAgent()
        {
            // Obtain a reference to the period task, if one exists
            periodicTask = ScheduledActionService.Find(periodicTaskName) as PeriodicTask;

            // If the task already exists and background agents are enabled for the
            // application, you must remove the task and then add it again to update
            // the schedule
            if (periodicTask != null)
            {
                RemoveAgent(periodicTaskName);
            }

            periodicTask = new PeriodicTask(periodicTaskName);

            // The description is required for periodic agents. This is the string that the user
            // will see in the background services Settings page on the device.
            periodicTask.Description = "This is Our Background Agent";

            // Place the call to Add in a try block in case the user has disabled agents
            try
            {
                ScheduledActionService.Add(periodicTask);

                // If debugging is enabled, use LaunchForTest to launch the agent in one minute.
                ScheduledActionService.LaunchForTest(periodicTaskName, TimeSpan.FromSeconds(5));
            }
            catch (InvalidOperationException exception)
            {
                if (exception.Message.Contains("BNS Error: The action is disabled"))
                {
                    //MessageBox.Show("Background agents for this application have been disabled by the user.");
                }
                if (exception.Message.Contains("BNS Error: The maximum number of ScheduledActions of this type have already been added."))
                {
                    // No user action required. The system prompts the user when the hard limit of periodic tasks has been reached.
                }
            }
            catch (SchedulerServiceException)
            {
                // No user action required.
            }
        }
</code></pre>

<p>参考了微软给的示例代码，当然也可以关闭代理：</p>

<pre><code>        protected void EndBackAgent()
        {
            periodicTask = ScheduledActionService.Find(periodicTaskName) as PeriodicTask;
            if (periodicTask != null)
            {
                RemoveAgent(periodicTaskName);
            }
        }
</code></pre>

<p>LaunchForTest是方便调试使用的，加上try catch是为了防止用户设置了关闭后台代理后引发异常。</p>

<h4>Step 2. 在ScheduledTaskAgent中获取GPS</h4>

<pre><code>       protected override void OnInvoke(ScheduledTask task)
        {
            //TODO: 添加用于在后台执行任务的代码
         taskName = task.Name;
            GetGPS();
        }

        private void GetGPS()
        {
            if (!SystemCore.Instance.position().IsNaN)
            {
                SendGPSByHttpWebRequest();
            }
            else
            {
                gps_timecount = 0;
                gps_timer = new Timer(new TimerCallback(gps_timer_Tick),null,0,1000);
            }
        }

        void gps_timer_Tick(object sender)
        {
            gps_timecount++;
            gps_timer.Dispose();
            gps_timer = null;
            if (!SystemCore.Instance.position().IsNaN)
            {
                SendGPSByHttpWebRequest();
            }
            else if (gps_timecount &lt; 10)
            {
                gps_timer = new Timer(new TimerCallback(gps_timer_Tick), null, 0, 1000);
            }
        }
</code></pre>

<p>增加了限时处理，超过10秒未取到GPS则放弃此次上传。用Timer而未使用DispatcherTimer的原因是，使用后者必须用BeginInvoke的方式在Dispatcher线程中创建，不然会crash，而在Dispatcher线程中用HttpWebRequest发起http请求没有成功，可能是死锁等原因，暂时没走通这条路，就换了Timer，这样能在后台代理线程中发http。</p>

<h4>Step 3. 使用独立存储+Mutex从主程序获取user id</h4>

<p>wp7中是没有IPC的，或者说不允许用户创建的程序间进行通信，可以使用独立存储或者IsolatedStorageSettings或者LINQ 2 SQL在主程序和后台代理间进行通信，我只用了独立存储，连Mutex也没加，一是主程序写，代理读，二是程序逻辑不太可能造成冲突。官方不推荐使用IsolatedStorageSettings。</p>

<h4>Step 4. 在ScheduledTaskAgent中使用HttpWebRequest</h4>

<p>数据都准备好了(user id+经纬度)，接下来就是发http了。最开始是按照下面链接中的方法，没有发成功，不过还是有些收获。<a href="http://www.cnblogs.com/yanxiaodi/archive/2012/01/18/2325320.html">http://www.cnblogs.com/yanxiaodi/archive/2012/01/18/2325320.html</a>  然后在网上搜了一圈都试过，没有能成功的。最后找到了一个老外的分享，twitter客户端的push机制，用了里面的一个库，成功了。<a href="http://blogs.msdn.com/b/ptorr/archive/2011/07/12/background-agents-part-2-of-3.aspx">http://blogs.msdn.com/b/ptorr/archive/2011/07/12/background-agents-part-2-of-3.aspx</a> 
在http成功发送后得调用NotifyComplete通知操作系统这次任务圆满完成，期待下次继续，不调用的话下次时间片到了不会启动后台代理。在网络请求很长时间不返回的情况下，如果这时间超过了系统能允许后台代理一次运行的时间（25秒），那么就不会调用到NotifyComplete，导致下次无法启动，因此这里有必要加上限时处理。</p>

<h2>push的统计</h2>

<h2> </h2>

<p>在Symbian上曾做过push统计的事情，push功能推出去需要知道用户的反馈：收到过多少push，分别是什么类型的，用户打开过多少次push，每次分别是什么类型的等等。最方便的做法就是讲统计数据加到心跳包末尾：
在心跳包URL末尾加a=<strong>来统计push。
a=0            默认情况
a=1            客户端在前台时候收到push
a=2            客户端在后台时候收到push
a=3            用户确定
a=4            用户取消
当a=1,2,3,4时，为了统计push类型，在数字后直接跟push类型（0,1,2,…15,16等），不足两位补足两位。如a=101, a=313,a=416等
ps：
Symbian V5用a=</strong>
Symbian V3用b=<strong>
iOS用c=</strong>
安卓目前没有需求，若有就用d=**
iOS由于使用了长连接+APNS结合的两种push方式，所以也能够用这种方法统计一部分数据。
wp7目前没有统计需求，有的话再调研下。</p>

<p> </p>

<p>最后感谢msdn，google和Stackoverflow。
还不小心发现一枚山寨版Stackoverflow(栈溢出)，叫Segmentfault(段错误) 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图像滤镜之程序实现]]></title>
    <link href="http://xiaojiayi.com/blog/2011/11/13/e59bbee5838fe6bba4e9959ce4b98be7a88be5ba8fe5ae9ee78eb0/"/>
    <updated>2011-11-13T23:43:28+08:00</updated>
    <id>http://xiaojiayi.com/blog/2011/11/13/e59bbee5838fe6bba4e9959ce4b98be7a88be5ba8fe5ae9ee78eb0</id>
    <content type="html"><![CDATA[<p>前段时间做了一段时间塞班平台的图像处理研究，想要做出类似于instagram、Q拍那样的滤镜特效，在手机拍完照后可以用我们提供的滤镜对照片进行美化处理（有空再做个ios版的）。看了一些instagram、Q拍、美图秀秀、可牛快拍等软件做出来的效果，对于图像处理零基础的我表示鸭梨很大。从RGB通道、alpha通道、位图结构、灰度图、图层、颜色表等概念看起，然后了解基本的图像处理方法如锐化、柔化、扩散、雕刻、黑白、反色等基本特效的原理，到高斯模糊、图像混合、柏林噪声等进阶的玩法，到最后总结出了一套做图像特效的方法，给我一个.psd的photoshop源文件，我便可以根据里面的拆分步骤用程序去实现该效果。其中参考了不少国外站点的东西，尤其是StackOverflow上找到了很多有用的东东，东拼西凑组成了我图像处理这块的一些心得。先上图吧。</p>

<p>原图如下：</p>

<p><img src="/images/2011/11/Nostalgia1.bmp"></p>

<ol type="a">
<li>基础效果</li>
</ol>


<p>这里说基础是因为这些效果不涉及图像混合等更加复杂的东东，只是对每个像素的RGB通道做一些处理。 有的算法一行代码就能解决了，有的稍微复杂些，不过基本国内的网上都能找得到。</p>

<ol>
<li> 黑白</li>
</ol>


<p><img src="/images/2011/11/blackwhite.png"></p>

<ol>
<li> 浮雕</li>
</ol>


<p><img src="/images/2011/11/emboss.png"></p>

<ol>
<li> 素描</li>
</ol>


<p><img src="/images/2011/11/sumiao.png"></p>

<ol>
<li> lomo</li>
</ol>


<p><img src="/images/2011/11/lomo.png"></p>

<ol>
<li> 马赛克</li>
</ol>


<p><img src="/images/2011/11/mosaic.png"></p>

<ol>
<li> 扫描线</li>
</ol>


<p><img src="/images/2011/11/scanline.png"></p>

<ol>
<li> 波普</li>
</ol>


<p><img src="/images/2011/11/bopo.png"></p>

<ol>
<li> 鱼眼</li>
</ol>


<p><img src="/images/2011/11/fisheye.png"></p>

<ol type="a">
<li>进阶效果</li>
</ol>


<p>这里仅作了图像混合，并没有用函数去处理每个RGB分量，毕竟不是专门搞ps的，不知道怎么弄算好看.. 不过貌似可牛快拍里有些效果就是做了图像混合，然后稍做了些处理。这种做法比较没技术含量.. 不适合单独作为产品级的效果，可以作为复杂特效的某些步骤。</p>

<ol>
<li> 早晨</li>
</ol>


<p><img src="/images/2011/11/morning.png"></p>

<ol>
<li> 星光</li>
</ol>


<p><img src="/images/2011/11/star.png"></p>

<p>这里就放出两张图了，因为做法其实都一样，最多传的参数不同罢了。当然图像混合也是有学问的，可以参考国外一哥们的系列文章：<a href="http://jswidget.com/blog/2011/03/11/image-blending-algorithmpart-i/">http://jswidget.com/blog/2011/03/11/image-blending-algorithmpart-i/</a></p>

<p>c.高级特效</p>

<p>下面两个效果挺花时间的，主要要知道怎么做比较费时间，做的过程的话第二个效果也比较复杂，是根据.psd文件的拆分步骤一步步做出来的，所以在移动平台上跑有些慢&hellip;</p>

<ol>
<li> 老照片</li>
</ol>


<p><img src="/images/2011/11/old-photo.png"></p>

<ol>
<li> Nostalgia</li>
</ol>


<p><img src="/images/2011/11/nostalgia.png"></p>

<p>做的方法受这个老外的影响很大：<a href="http://taptaptap.com/blog/creating-a-camera-plus-fx/">http://taptaptap.com/blog/creating-a-camera-plus-fx/</a></p>

<p>这是个开发ios上滤镜app的老外设计师写的，而且是夫妻档，貌似老婆是设计师，她将做好的photoshop效果图给源文件给老公，然后老公根据.psd文件做成ios应用放到app store里去卖。我的Nostalgia特效就是模仿的他们的效果。不过老外没有把源代码放上来，就截了段核心函数，然后我自己摸索了好多天，不断的尝试，最后才搞成的效果。里面还涉及到了用Matlab模拟出曲线的函数，竟然用到了四次函数。。不过整个过程还是很享受的，很有乐趣。如果组内有需求，可以帮着搞一下。</p>
]]></content>
  </entry>
  
</feed>
